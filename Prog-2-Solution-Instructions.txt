 Here are the steps to follow to complete our programming assignment #2. This might help you make full in this assignment.
The challenge is whether you can implement these steps. Here, it goes...

------------------------------------------------------EASY PART(Start)------------------------------------------------
1) Use Scanner to take input from the file line by line (i.e one class at a time) and then use another scanner to store details for each class. 
You can either store them in a data strucuture(such as an array or arraylist) or create an object for each line, where the object will store information
such as dept, number... as its attributes. I would prefer creating objects. 
   -> If you choose to create objects, store them in a data structure. The data structure you choose must allow the indexing of its elements.

2)Build Adjacency Matrix using three given conditions, right after you finish reading and storing input. Adjacency Matrix will be a NxN boolean matrix 
where N is the number of classes to schedule. To build the matrix, run nested loop, and everytime, check three given conditions and set the value to 1 or true
if any of the three conditions is met. Since, you will use this matrix later, declare it global.

--------------------------------------------------HARD PART(Completing the method void minSlots())------------------------------------------------------------
3) 
 I) Pull up the graph coloring algorithm in the slide and copy-paste the methods m_coloring(index i) and promising(i). Declare both of them as private. 
   "Man, that's so easy." Yes, it is if you do not have to understand what's going on. These methods are using an array called vcolor[]. In our case, that array will
   store the time slot# (i.e. 1 or 2 or 3..) for each courses. So, declare that array as global and initialize it in the constructor after the point you know how many classes 
   to schedule. 
 
 II)Now, we know that m_coloring(index i) is using m (minimum no. time slots in our case) to run the for loop, and it will print the color(time slot) of every node
    after all the nodes(or classes) are successfully colored(or alotted timeslot). In our case, we do not know the minimum no. of time slots, so we start with m=1 
	and keep increasing m until all the nodes are successfully colored.
	So, lets write minSlots().
	-start with m =1,(while declaring m, keep in mind that this will be used by m_coloring as well)
	-create a loop, in which you will call m_coloring(n), where n is the first class (can be 0 or 1 depending on your indexing)
	-and increment the value of m, 
	-until all the classes have be assigned a timeslot(which means all the nodes will have been colored)
	   now, there are different ways to know that all the classes have been assigned a timeslot
	   one way is to see that the last element of vcolor[] has been changed and is not 0(the default value)
	-one more thing, before you make the call m_coloring(n), make sure that the vcolor[n] is set to 1.(first class is always assigned time slot # 1)
   so, the loop will terminate when all the courses have their timeslots (or when array vcolor is filled) and the value that m is storing will be the minimum num of timeslots, return it.
  
  III)we are not done yet. Time to make some changes to the method m_coloring(index i). 
      There is a big problem in using this method as it is. You might not have noticed that this method from book is printing every possible way of coloring nodes.
	  We do not want that. We want to stop after finding one possible way of coloring every nodes. Its your task to figure that out. make use of the base case to stop recursive calls. 
	  you might have to make some changes in this method to achieve that
	  
----------------------------------------------------LAST PART-----------------------------------------------------------------------------------------------------
4) completing the method String getSchedule()
   Up to this point, you will already have stored the time slots#(1 or 2 or 3) for every courses in vcolor array. So, you just need to use that array 
   and the data strucuture you used for storing classes to group, for every time slot#, classes belonging to that timeslot#.  
   
....................................JUST DO IT.................................